// Generated by dts-bundle v0.7.3

export = ignitionTween;
export as namespace ignitionTween;

declare namespace ignitionTween {

    export class Tweener {
        static autoOverwrite: boolean;
        constructor();
        static addTween(p_scopes?: any, p_parameters?: any): boolean;
        static addCaller(p_scopes?: Object, p_parameters?: Object): boolean;
        static removeTweensByTime(p_scope: Object, p_properties: any, p_timeStart: number, p_timeComplete: number): boolean;
        static removeTweens(p_scope: Object, ...args: Array<any>): boolean;
        static removeAllTweens(): boolean;
        static pauseTweens(p_scope: Object, ...args: Array<any>): boolean;
        static pauseAllTweens(): boolean;
        static resumeTweens(p_scope: Object, ...args: Array<any>): boolean;
        static resumeAllTweens(): boolean;
        static splitTweens(p_tween: number, p_properties: Array<any>): number;
        static removeTweenByIndex(i: number, p_finalRemoval?: boolean): boolean;
        static pauseTweenByIndex(p_tween: number): boolean;
        static resumeTweenByIndex(p_tween: number): boolean;
        static init(...rest: Array<any>): void;
        static registerTransition(p_name: string, p_function: Function): void;
        static registerSpecialProperty(p_name: string, p_getFunction: Function, p_setFunction: Function, p_parameters?: Array<any>, p_preProcessFunction?: Function): void;
        static registerSpecialPropertyModifier(p_name: string, p_modifyFunction: Function, p_getFunction: Function): void;
        static registerSpecialPropertySplitter(p_name: string, p_splitFunction: Function, p_parameters?: Array<any>): void;
        static updateTime(): void;
        static updateFrame(): void;
        static onEnterFrame(): void;
        static setTimeScale(p_time: number): void;
        static isTweening(p_scope: Object): boolean;
        static getTweens(p_scope: Object): Array<any>;
        static getTweenCount(p_scope: Object): number;
        static getCurrentTweeningTime(p_tweening: any): number;
        static getVersion(): string;
        static printError(p_message: string): void;
    }

    export class TweenListObj {
        scope: Object;
        properties: any;
        timeStart: number;
        timeComplete: number;
        useFrames: boolean;
        transition: Function;
        transitionParams: Object;
        onStart: Function;
        onUpdate: Function;
        onComplete: Function;
        onOverwrite: Function;
        onError: Function;
        onStartParams: Array<any>;
        onUpdateParams: Array<any>;
        onCompleteParams: Array<any>;
        onOverwriteParams: Array<any>;
        onStartScope: Object;
        onUpdateScope: Object;
        onCompleteScope: Object;
        onOverwriteScope: Object;
        onErrorScope: Object;
        rounded: boolean;
        isPaused: boolean;
        timePaused: number;
        isCaller: boolean;
        count: number;
        timesCalled: number;
        waitFrames: boolean;
        skipUpdates: number;
        updatesSkipped: number;
        hasStarted: boolean;
        constructor(p_scope: any, p_timeStart: number, p_timeComplete: number, p_useFrames: boolean, p_transition: Function, p_transitionParams: any);
        clone(omitEvents: boolean): TweenListObj;
        toString(): string;
        static makePropertiesChain(p_obj: any): any;
    }

    export class PropertyInfoObj {
        valueStart: number;
        valueComplete: number;
        originalValueComplete: any;
        arrayIndex: number;
        extra: any;
        isSpecialProperty: boolean;
        hasModifier: boolean;
        modifierFunction: Function;
        modifierParameters: Array<any>;
        constructor(p_valueStart: number, p_valueComplete: number, p_originalValueComplete: Object, p_arrayIndex: number, p_extra: Object, p_isSpecialProperty: boolean, p_modifierFunction: Function, p_modifierParameters: Array<any>);
        clone(): PropertyInfoObj;
        toString(): string;
    }

    export class AuxFunctions {
        static numberToR(p_num: number): number;
        static numberToG(p_num: number): number;
        static numberToB(p_num: number): number;
        static getObjectLength(p_object: Object): number;
        static concatObjects(...args: Array<any>): Object;
    }

    export class SpecialPropertySplitter {
        parameters: Array<any>;
        splitValues: Function;
        constructor(p_splitFunction: Function, p_parameters: Array<any>);
        toString(): string;
    }

    export class Equations {
        constructor();
        static init(): void;
        static easeNone(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInQuad(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutQuad(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutQuad(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInQuad(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInCubic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutCubic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutCubic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInCubic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInQuart(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutQuart(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutQuart(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInQuart(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInQuint(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutQuint(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutQuint(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInQuint(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInSine(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutSine(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutSine(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInSine(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInExpo(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutExpo(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutExpo(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInExpo(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInCirc(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutCirc(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutCirc(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInCirc(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInElastic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutElastic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutElastic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInElastic(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInBack(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutBack(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutBack(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInBack(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInBounce(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutBounce(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeInOutBounce(t: number, b: number, c: number, d: number, p_params?: any): number;
        static easeOutInBounce(t: number, b: number, c: number, d: number, p_params?: any): number;
    }

    export class SpecialProperty {
        getValue: Function;
        setValue: Function;
        parameters: Array<any>;
        preProcess: Function;
        constructor(p_getFunction: Function, p_setFunction: Function, p_parameters?: Array<any>, p_preProcessFunction?: Function);
        toString(): string;
    }

    export class SpecialPropertyModifier {
        modifyValues: Function;
        getValue: Function;
        constructor(p_modifyFunction: Function, p_getFunction: Function);
        toString(): string;
    }
}

